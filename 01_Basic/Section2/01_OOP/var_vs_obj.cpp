// 변수와 객체(variable vs object)
// 1) 변수(variable)
//  => "변"하는 "수"
//  => "메모리의 특정 위치를 가리키는 이름"
//  => 변수를 사용하면 "메모리에 값을 읽거나 쓸 수" 있다.
//  => 언어가 제공하는 "기본 타입(primitive type)의 인스턴스"

// 2) 객체(object)
//  => 메모리를 할당하고 "자신을 스스로 초기화"한다.
//  => 상태와 동작을 가지고 있는 존재
//  => 객체를 사용하면 해당 "객체가 제공하는 다양한 서비스를 사용"할 수 있다.
//  => "사용자 정의 타입(User Define Type)으로 만든 변수"

// 프로그래밍 패러다임(paradigm)
// 1) 명령형(절차적) 프로그래밍 패러다임(C 언어)
//  => 프로그램은 "컴퓨터가 수행할 명령어들의 나열"이다.
//  => 모든 프로그램은 main 함수부터 "순차적으로 실행"된다.
//  => 제어문, 반복문, 함수 등을 사용해서 실행흐름을 변경할 수 있다.

// 2) 객체지향 프로그래밍 패러다임(C++, JAVA, C#)
//  => 프로그램은 "객체들과 객체들 사이의 메시지"이다.
//  => 문제를 해결하기 위해 "필요한 타입을 찾아내고, 설계"한 후
//  => "객체를 생성"하고, "객체끼리 메시지를 주고 받으면서 문제를 해결"하는 것

// C++과 프로그래밍 패러다임
// 1) C++은 "다중 패러다임(Multi paradigm)" 언어이다.
//  => "명령형(절차적) 프로그래밍 패러다임" 지원
//  => "객체지향 프로그래밍 패러다임" 지원
//  => "일반화 프로그래밍 패러다임" 지원 - 템플릿
//  => "함수형 프로그래밍 패러다임" 지원

#incldue <stack>

int main()
{
    int n = 0; // 변수
    n = 10;
    
    std::stack<int> s; // 객체
    
    s.push(10);
    s.push(20);
    s.push(30);
    int n2 = s.top();
    
    s.pop();
}